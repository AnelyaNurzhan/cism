
import { ExcelQuestionRow, ColumnKeys, ImportError } from './types';
import { Question, QuestionOption } from '@/types/database';

/**
 * Parses a row from the Excel file and converts it to a Question
 */
export const parseQuestionRow = (
  row: ExcelQuestionRow, 
  index: number, 
  columnKeys: ColumnKeys,
  language: string
): { question: Question | null, error: ImportError | null } => {
  const { questionKey, typeKey, optionsKey, correctAnswersKey, pointsKey } = columnKeys;
  
  if (!questionKey || !optionsKey || !correctAnswersKey) {
    return {
      question: null,
      error: {
        rowIndex: index,
        message: language === 'ru' 
          ? 'Отсутствуют обязательные поля' 
          : 'Міндетті өрістер жоқ'
      }
    };
  }

  try {
    const questionText = String(row[questionKey]);
    const optionsText = String(row[optionsKey]);
    const correctAnswersText = String(row[correctAnswersKey]);
    
    // Validate required fields
    if (!questionText || !optionsText || !correctAnswersText) {
      return {
        question: null,
        error: {
          rowIndex: index,
          message: language === 'ru' 
            ? 'Отсутствуют обязательные поля' 
            : 'Міндетті өрістер жоқ'
        }
      };
    }
    
    // Parse options
    const optionsList = optionsText.split(';').map(o => o.trim()).filter(Boolean);
    if (optionsList.length < 2) {
      return {
        question: null,
        error: {
          rowIndex: index,
          message: language === 'ru' 
            ? 'Должно быть не менее 2 вариантов ответа' 
            : 'Кемінде 2 жауап нұсқасы болуы керек'
        }
      };
    }
    
    // Parse correct answers
    const correctAnswersList = correctAnswersText.split(';').map(a => a.trim()).filter(Boolean);
    if (correctAnswersList.length === 0) {
      return {
        question: null,
        error: {
          rowIndex: index,
          message: language === 'ru' 
            ? 'Не указаны правильные ответы' 
            : 'Дұрыс жауаптар көрсетілмеген'
        }
      };
    }
    
    // Determine question type based on correct answers count or explicit value
    let questionType: 'single' | 'multiple';
    if (typeKey && row[typeKey]) {
      const typeValue = String(row[typeKey]).toLowerCase();
      questionType = 
        typeValue.includes('один') || typeValue.includes('жалғыз') 
          ? 'single' 
          : 'multiple';
    } else {
      questionType = correctAnswersList.length === 1 ? 'single' : 'multiple';
    }
    
    // Create options array with correct answers marked
    const questionOptions: QuestionOption[] = optionsList.map((text, i) => ({
      id: i + 1,
      text: text,
      textKz: text, // Both languages get same text in import, user can edit later
      isCorrect: correctAnswersList.includes(text)
    }));
    
    // Get correct answers as array of indices
    const correctAnswersIndices = questionOptions
      .map((opt, i) => opt.isCorrect ? i + 1 : null)
      .filter(Boolean) as number[];
      
    if (correctAnswersIndices.length === 0) {
      return {
        question: null,
        error: {
          rowIndex: index,
          message: language === 'ru' 
            ? 'Не удалось определить правильные ответы' 
            : 'Дұрыс жауаптарды анықтау мүмкін емес'
        }
      };
    }
    
    // Get points value
    const points = pointsKey && row[pointsKey] 
      ? Number(row[pointsKey]) || 1 
      : 1;
    
    // Create question object
    const question: Question = {
      id: '', // Will be generated by the database
      text: questionText,
      textKz: questionText, // Both languages get same text in import, user can edit later
      type: questionType,
      options: questionOptions,
      correctAnswers: correctAnswersIndices,
      points: points,
      orderNumber: index + 1
    };
    
    return {
      question,
      error: null
    };
    
  } catch (err) {
    return {
      question: null,
      error: {
        rowIndex: index,
        message: language === 'ru' 
          ? 'Ошибка обработки' 
          : 'Өңдеу қатесі'
      }
    };
  }
};
